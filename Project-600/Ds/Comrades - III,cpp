//BISMILLAHIRRAHMANIRRAHIM
/*
  Problem Link :: https://www.hackerearth.com/tracks/pledge-2015-hard/comrades-iii/
 manus tar shopner soman boro
 all my suceesses are dedicated to my parents
 The true test of a man's character is what he does when no one is watching.


 Author :: Shakil Ahmed
.............AUST_CSE27.........
 prob   ::
 Type   ::
 verdict::
 */

#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair

// Macro
#define eps 1e-9
#define pi acos(-1.0)
#define ff first
#define ss second
#define re return
#define QI queue<int>
#define SI stack<int>
#define SZ(x) ((int) (x).size())
#define all(x) (x).begin(), (x).end()
#define sq(a) ((a)*(a))
#define distance(a,b) (sq(a.x-b.x) + sq(a.y-b.y))
#define iseq(a,b) (fabs(a-b)<eps)
#define eq(a,b) iseq(a,b)
#define ms(a,b) memset((a),(b),sizeof(a))
#define G() getchar()
#define MAX3(a,b,c) max(a,max(b,c))
#define II ( { int a ; read(a) ; a; } )
#define LL ( { Long a ; read(a) ; a; } )
#define DD ({double a; scanf("%lf", &a); a;})

double const EPS=3e-8;
using namespace std;

#define FI freopen ("input.txt", "r", stdin)
#define FO freopen ("output.txt", "w", stdout)

typedef long long Long;
typedef long long int64;
typedef unsigned long long ull;
typedef vector<int> vi ;
typedef set<int> si;
typedef vector<Long>vl;
typedef pair<int,int>pii;
typedef pair<string,int>psi;
typedef pair<Long,Long>pll;
typedef pair<double,double>pdd;
typedef vector<pii> vpii;

// For loop

#define forab(i, a, b)	for (__typeof (b) i = (a) ; i <= b ; ++i)
#define rep(i, n)		forab (i, 0, (n) - 1)
#define For(i, n)		forab (i, 1, n)
#define rofba(i, a, b)	for (__typeof (b)i = (b) ; i >= a ; --i)
#define per(i, n)		rofba (i, 0, (n) - 1)
#define rof(i, n)		rofba (i, 1, n)
#define forstl(i, s)	for (__typeof ((s).end ()) i = (s).begin (); i != (s).end (); ++i)

template< class T > T gcd(T a, T b) { return (b != 0 ? gcd<T>(b, a%b) : a); }
template< class T > T lcm(T a, T b) { return (a / gcd<T>(a, b) * b); }

//Fast Reader
template<class T>inline bool read(T &x){int c=getchar();int sgn=1;while(~c&&c<'0'||c>'9'){if(c=='-')sgn=-1;c=getchar();}for(x=0;~c&&'0'<=c&&c<='9';c=getchar())x=x*10+c-'0'; x*=sgn; return ~c;}

//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//int dx[]={2,1,-1,-2,-1,1};int dy[]={0,1,1,0,-1,-1}; //Hexagonal Direction

/* **************************************  My code start here ****************************************** */


const int NX = 100000 + 10 ;

vector < int > adj[ NX ] ;


int Val[ NX ] , tree[ NX ] , ID[ NX ] , n ;

int starttime[ NX ] , endtime[ NX ] , cnt ;

int seg[ ( 4 * NX ) + 10 ] , lazy[ ( 4 * NX ) + 5 ] , lazyVal[ ( 4 * NX ) + 10 ];

int dfs( int x , int par )
{
    Val[ x ] = 0 ;
    starttime[ x ] = ++cnt ;
    int sz = adj[ x ].size();
    rep( i , sz )
    {
        int u = adj[ x ][ i ];
        if( u == par ) continue ;
        Val[ x ] += dfs( u , x );

    }
    endtime[ x ] = cnt ;
    return Val[ x ] + 1 ;

}

void ini( int node , int lft , int rgt )
{
    if( lft == rgt )
    {
        seg[ node ] = 1 ;
        lazy[ node ] = 0 ;
        lazyVal[ node ] = 0 ;
        return ;
    }
    int mid = ( lft + rgt ) / 2;
    ini( node * 2 , lft , mid );
    ini( ( node * 2 ) + 1 , mid + 1 , rgt );
    seg[ node ] = seg[ ( 2 * node ) ] + seg[ ( 2 * node ) + 1 ];
}


int Query( int node , int lft , int rgt , int x , int y )
{
    if( lazy[ node ] )
    {
        seg[ node ] = ( rgt - lft + 1 ) * lazyVal[ node ];
        if( lft != rgt )
        {

            lazy[ node * 2 ] = 1 ;
            lazyVal[ node * 2 ] =  lazyVal[ node ];
            lazy[ ( 2 * node ) + 1 ] = 1 ;
            lazyVal[ ( 2 * node ) + 1 ] = lazyVal[ node ] ;

        }
        lazy[ node ] = 0 ;
        lazyVal[ node ] = 0 ;
    }
    if( lft >= x && y >= rgt )
    {
     //   printf(" lft :: %d rgt :: %d return value :: %d\n" , lft , rgt , seg[ node ] );
        return seg[ node ];
    }

    int mid = ( lft + rgt )/2 ;
    if( y <= mid ) return Query( node * 2 , lft , mid , x , y );
    else if( x > mid ) return  Query( ( 2 * node ) + 1 , mid + 1 , rgt , x , y );
    else
    {
        return Query( node * 2 , lft , mid , x , y ) + Query( ( 2 * node ) + 1 , mid + 1 , rgt , x , y );
    }
}


void Update( int node , int lft , int rgt , int x , int y , int val )
{

    if( lazy[ node ] )
    {
        seg[ node ] = ( rgt - lft + 1 ) * lazyVal[ node ];
        if( lft != rgt )
        {
            lazy[ node * 2 ] = 1 ;
            lazyVal[ node * 2 ] = lazyVal[ node ];
            lazy[ ( 2 * node ) + 1 ] = 1 ;
            lazyVal[ ( 2 * node ) + 1 ] = lazyVal[ node ] ;
        }
        lazyVal[ node ] = 0 ;
        lazy[ node ] = 0 ;
    }
    if( y < lft || x > rgt ) return ;

    if( x <= lft && y >= rgt )
    {
      //  printf(" lft :: %d rgt :: %d val :: %d\n" , lft , rgt , val );
        seg[ node ] = ( rgt - lft + 1 ) * val ;
        if( lft != rgt )
        {
            lazy[ node * 2 ] = 1 ;
            lazyVal[ node * 2 ] = val ;
            lazy[ ( 2 * node ) + 1 ] = 1 ;
            lazyVal[ ( 2 * node ) + 1 ] = val ;
        }
        lazy[ node ] = 0 ;
        return ;
    }
    int mid = ( lft + rgt )/2 ;
    Update( node * 2 , lft , mid , x , y , val );
    Update( ( 2 * node ) + 1 , mid + 1 , rgt , x , y , val );
    seg[ node ] = seg[ node + node ] + seg[ node + node + 1 ];
}




int main()
{
   // I will always use scanf and printf
   // May be i won't be a good programmer but i will be a good human being

    n = II ;
    int root = 0 ;
    for ( int i = 1 ; i <= n ; i++ )
    {
        int par = II ;
        if( par == 0 ) root = i ;
        else adj[ par ].pb( i );
    }

    dfs( root , -1 );
  /* for ( int i = 1 ; i <= n ; i++ )
    {
        printf(" start :: %d end :: %d val :: %d\n" , starttime[ i ] , endtime[ i ] , Val[ i ] );
    }
    printf( " here \n" ); */
    ini( 1 , 1 , n );
    int q = II ;
    while( q-- )
    {
        int t = II , x = II ;
        if( t == 3 )
        {
            if( starttime[ x ] + 1 > endtime[ x ] ) printf("0\n");
            else
            {
                int ans = Query( 1 , 1 , n , starttime[ x ] + 1 , endtime[ x ] );
                printf("%d\n",ans);
            }
        }
        else if( t == 2 )
        {

            Update( 1 , 1 , n , starttime[ x ] + 1 , endtime[ x ] , 0 );
        }
        else
        {
            Update( 1 , 1 , n , starttime[ x ] + 1 , endtime[ x ] , 1 );
        }
    }


    return 0;
}
/*
7
2 0 2 2 4 5 6
4
1 5
2 2
1 6
3 2
*/
